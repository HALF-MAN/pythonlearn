"""
序列类型，其衍生类型：字符串类型，元祖类型，列表类型
操作符包括
x in s 是否是序列中的元素
x not in s 是不不是序列中的元素
s + t 连接两个序列
s*n或n*s  复制序列s复制n次
s[i] 返回索引第i个元素,以0开始
s[i:j]或s[i:j:k] 切片，返回序列中s中从i到j以k为步长的元素子序列,[i,j)不包括j
len(s) 返回序列的长度
min(s) 返回序列s的最小长度，s中的元素需要可比较，例如序列中元素类型不一致
max(s) 返回序列s的最大长度，s中的元素需要可比较，例如序列中元素类型不一致
s.index(i)或s.index(x, i, j) 返回序列s从i开始到j位置中第一次出现元素x的位置,
如果没有找到抛出ValueError: substring not found异常，注意范围是[i,j)左闭右开
"""

'''字符串类型'''
s = "jikl"
print(s[1:3])

'''
列表类型是一种序列类型，创建后可以随意被修改
使用方括号[]或者list()创建，元素间用逗号，分隔
列表各元素类型可以不同，无长度限制
注意：两个列表的赋值操作是应用赋值，他们引用的是同一个列表
ls2 = ls1
ls[i] = x 替换列表中的元素
ls[i:j] = lst 替换指定位置的切片,连续位置切片不要求右边的列表数量一致
ls[i:j:k] = lt 这种方式是切片后的对应位置元素要被替换为右边的列表元素
右边列表元素数量要和切片的长度一致，因为要保持位置对应
del关键字删除列表内的第i各元素
del ls[3]
del ls[i:j:k] 删除从第i个元素到第j以k为步长的元素
ls += lt 更新列表ls，将列表lt元素增加到列表ls中
ls.append(x) 在列表最后增加一个元素
ls.clear() 删除ls中所有元素
ls.copy() 生成一个新列表，赋值ls中的所有元素
ls.insert(i, x)在列表ls中的第i位置增加元素x
ls.pop(i) 去取出ls中第i个元素，并删除该元素
ls.remove(x)将列表中出现的第一个元素x删除
ls.revers() 反转列表元素 
'''
ls = ["python", 123, ".io"]
print(ls[::-1])
print(s.index("k", 0, 3))
ls1 = [1, 2, 4, 5]
ls2 = ls[1:3]
ls2.clear()
print(ls1)
ls1[1:3] = [1, 2, 3, 4]
print(ls1)
ls1[0:3:2] = ["hello", 9]
print(ls1)
ls1 += ["j", "k", 4]
print(ls1)


'''
元组类型是一种序列类型，一旦创建就不能被修改
使用小括号()或者tuple()创建，元素间用逗号分隔
可以使用或者不适用小括号
'''
#返回值本身就是一种元组类型，不管返回值是几个
def func():
    return 1, 2
creature = "cat", "dog", "tight", "human"
color = (0x001100, "blue", creature)
#从color里面找到最后一个元素，最后一个元素是一个元组
# 所以可以再次利用索引找到第二层里面的元素
#切片操作返回的还是一个元组类型,新的内存空间,不是引用
print(color[-1][2])


